import VNode, { createTextVNode } from './vnode'
import {
  isUndef,
  isDef,
  isTrue,
  isFalse,
  isPrimitive
} from "./util"

// 调用场景是 render 函数是编译生成的。
// 理论上编译生成的 children 都已经是 VNode 类型的，但这里有一个例外，
// 就是 functional component 函数式组件返回的是一个数组而不是一个根节点，
// 所以会通过 Array.prototype.concat 方法把整个 children 数组打平，让它的深度只有一层

export function simpleNormalizeChildren (children) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 一个场景是 render 函数是用户手写的，当 children 只有一个节点的时候，
// Vue.js 从接口层面允许用户把 children 写成基础类型用来创建单个简单的文本节点，
// 这种情况会调用 createTextVNode 创建一个文本节点的 VNode
// 另一个场景是当编译 slot、v-for 的时候会产生嵌套数组的情况，会调用 normalizeArrayChildren 方法
export function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

/**
 * 
 * @param {any} children 要规范的子节点
 * @param {string} nestedIndex 嵌套的索引
 */
function normalizeArrayChildren(children, nestedIndex) {
  const res = []  // 存放生成得vnode
  let i, c, lastIndex, last
  for (i = 0; i < children.length; i++) {
    c = children[i]
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1
    last = res[lastIndex]
    if (Array.isArray(c)) { // 如果children[i]仍然是个数组，则递归调用
      if (c.length > 0) {
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        if (isTextNode(c[0]) && isTextNode(last)) { // 如果第一个和组后一个都是文本，则合并处理（优化）
          res[lastIndex] = createTextVNode(last.text + c[0].text)
          c.shift()
        }
        res.push.apply(res, c)
      }
    } else if (isPrimitive(c)) {  // 如果children[i]是一个基础类型
      if (isTextNode(last)) {    // 如果children[i]和children[i-1]都是基础类型，则合并处理（优化）
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        res.push(createTextVNode(c))
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) { // 如果当前和上一个元素都是文本节点则合并处理（优化）
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}

/**
 * 
 * @param {vnode} node 判断是否为文本节点
 */
function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}
